# -*- coding: UTF-8 -*-
import os, sys, platform
import re


STATES_V_K = [
	("WRITE_R", 0x0000000000000001),
	("WRITE_G", 0x0000000000000002),
	("WRITE_B", 0x0000000000000004),
	("WRITE_A", 0x0000000000000008),
	("WRITE_Z", 0x0000004000000000),

	("DEPTH_TEST_LESS", 0x0000000000000010),
	("DEPTH_TEST_LEQUAL", 0x0000000000000020),
	("DEPTH_TEST_EQUAL", 0x0000000000000030),
	("DEPTH_TEST_GEQUAL", 0x0000000000000040),
	("DEPTH_TEST_GREATER", 0x0000000000000050),
	("DEPTH_TEST_NOTEQUAL", 0x0000000000000060),
	("DEPTH_TEST_NEVER", 0x0000000000000070),
	("DEPTH_TEST_ALWAYS", 0x0000000000000080),

	("BLEND_ZERO", 0x0000000000001000),
	("BLEND_ONE", 0x0000000000002000),
	("BLEND_SRC_COLOR", 0x0000000000003000),
	("BLEND_INV_SRC_COLOR", 0x0000000000004000),
	("BLEND_SRC_ALPHA", 0x0000000000005000),
	("BLEND_INV_SRC_ALPHA", 0x0000000000006000),
	("BLEND_DST_ALPHA", 0x0000000000007000),
	("BLEND_INV_DST_ALPHA", 0x0000000000008000),
	("BLEND_DST_COLOR", 0x0000000000009000),
	("BLEND_INV_DST_COLOR", 0x000000000000a000),
	("BLEND_SRC_ALPHA_SAT", 0x000000000000b000),
	("BLEND_FACTOR", 0x000000000000c000),
	("BLEND_INV_FACTOR", 0x000000000000d000),

	("BLEND_EQUATION_ADD", 0x0000000000000000),
	("BLEND_EQUATION_SUB", 0x0000000010000000),
	("BLEND_EQUATION_REVSUB", 0x0000000020000000),
	("BLEND_EQUATION_MIN", 0x0000000030000000),
	("BLEND_EQUATION_MAX", 0x0000000040000000),

	("BLEND_INDEPENDENT", 0x0000000400000000),
	("BLEND_ALPHA_TO_COVERAGE", 0x0000000800000000),

	("CULL_CW", 0x0000001000000000),
	("CULL_CCW", 0x0000002000000000),

	("PT_TRISTRIP", 0x0001000000000000),
	("PT_LINES", 0x0002000000000000),
	("PT_LINESTRIP", 0x0003000000000000),
	("PT_POINTS", 0x0004000000000000),

	("MSAA", 0x0100000000000000),
	("LINEAA", 0x0200000000000000),
	("CONSERVATIVE_RASTER", 0x0400000000000000)
]


STATES_K_V = {
	"WRITE_R" : 0x0000000000000001,
	"WRITE_G" : 0x0000000000000002,
	"WRITE_B" : 0x0000000000000004,
	"WRITE_A" : 0x0000000000000008,
	"WRITE_Z" : 0x0000004000000000,

	"DEPTH_TEST_LESS" : 0x0000000000000010,
	"DEPTH_TEST_LEQUAL" : 0x0000000000000020,
	"DEPTH_TEST_EQUAL" : 0x0000000000000030,
	"DEPTH_TEST_GEQUAL" : 0x0000000000000040,
	"DEPTH_TEST_GREATER" : 0x0000000000000050,
	"DEPTH_TEST_NOTEQUAL" : 0x0000000000000060,
	"DEPTH_TEST_NEVER" : 0x0000000000000070,
	"DEPTH_TEST_ALWAYS" : 0x0000000000000080,

	"BLEND_ZERO" : 0x0000000000001000,
	"BLEND_ONE" : 0x0000000000002000,
	"BLEND_SRC_COLOR" : 0x0000000000003000,
	"BLEND_INV_SRC_COLOR" : 0x0000000000004000,
	"BLEND_SRC_ALPHA" : 0x0000000000005000,
	"BLEND_INV_SRC_ALPHA" : 0x0000000000006000,
	"BLEND_DST_ALPHA" : 0x0000000000007000,
	"BLEND_INV_DST_ALPHA" : 0x0000000000008000,
	"BLEND_DST_COLOR" : 0x0000000000009000,
	"BLEND_INV_DST_COLOR" : 0x000000000000a000,
	"BLEND_SRC_ALPHA_SAT" : 0x000000000000b000,
	"BLEND_FACTOR" : 0x000000000000c000,
	"BLEND_INV_FACTOR" : 0x000000000000d000,

	"BLEND_EQUATION_ADD" : 0x0000000000000000,
	"BLEND_EQUATION_SUB" : 0x0000000010000000,
	"BLEND_EQUATION_REVSUB" : 0x0000000020000000,
	"BLEND_EQUATION_MIN" : 0x0000000030000000,
	"BLEND_EQUATION_MAX" : 0x0000000040000000,

	"BLEND_INDEPENDENT" : 0x0000000400000000,
	"BLEND_ALPHA_TO_COVERAGE" : 0x0000000800000000,

	"CULL_CW" : 0x0000001000000000,
	"CULL_CCW" : 0x0000002000000000,

	"PT_TRISTRIP" : 0x0001000000000000,
	"PT_LINES" : 0x0002000000000000,
	"PT_LINESTRIP" : 0x0003000000000000,
	"PT_POINTS" : 0x0004000000000000,

	"MSAA" : 0x0100000000000000,
	"LINEAA" : 0x0200000000000000,
	"CONSERVATIVE_RASTER" : 0x0400000000000000
}


def NumToAry79Str(num) :
	aryBegin = 48
	ary = 79
	s = ''
	while num >= ary :
		asc = chr((num % ary) + aryBegin)
		s = '%s%s' %(asc, s)
		num /= ary
	asc = chr(num + aryBegin)
	s = '%s%s' %(asc, s)
	return s


def Ary79StrToNum(s) :
	aryBegin = 48
	ary = 79
	n = 0
	powBase = 1
	i = len(s) - 1
	while i > 0 :
		asc = ord(s[i]) - aryBegin
		n += asc * powBase
		powBase *= ary
		i -= 1
	asc = ord(s[0]) - aryBegin
	n += asc * powBase
	return n


def ParseValue(v) :
	ret = ''
	groups = (5, 8, 13, 5, 2, 2, 4, 3)
	i = 0
	l = len(STATES_V_K)
	for g in groups :
		end = i + 5
		while i < end :
			item = STATES_V_K[i]
			if v & item[1] :
				ret += item[0] + ' | '
			i += 1
		if ret.endswith(' | ') :
			ret = ret[:-3]
		if not ret.endswith('\n') :
			ret += '\n'
	return ret



if __name__ == '__main__' :
	c = sys.argv[1]
	v = Ary79StrToNum(c)
	print ParseValue(v)
	if platform.system() == 'Windows' :
		os.system("pause")
